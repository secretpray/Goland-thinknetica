package main

import (
	"fmt"

	size "thinknetica/Lesson-13/memalloc/pkg"
)

type example struct {
	a []int
	b bool
	c int32
	d string
}

func main() {
	ex := example{
		a: []int{1, 2, 3}, // Размер среза: 24 байта (сам срез) + 8 (длина) + 8 (емкость) + 8 (указатель на массив) = 48 байт
		b: true,           // Размер булевого значения: 1 байт (требуется выравниания до 8 байтов + 7 байт)
		d: "1234",         // Размер строки: 16 байт (сама строка) + 4 байта (длина строки) = 20 байт
	} // Общий размер структуры ex: 48 байт (a) + 1 байт (b) + 20 байт (d) = 69 байтов
	fmt.Println("Размер в байтах для ex:", size.Of(ex))
	// для выравнивания (padding) добавляется 8 - 1 = 7 байт. Поэтому в консоль будет выведено -> 69 + 7 = 76 байтов

	ex1 := example{
		a: []int{1, 2, 3}, //  Размер среза: 24 байта (сам срез) + 8 (длина) + 8 (емкость) + 8 (указатель на массив) = 48 байт
		b: true,           // Размер булевого значения: 1 байт (требуется выранивания до 8 байтов)
		d: "1234",         // Размер строки: 16 байт (сама строка) + 4 байта (длина строки) = 20 байт
		c: 100,            // int32 переменная c занимает 4 байта (требуется выранивания до 8 байтов)
	} // 48 + 1 + 20 + 4 = 73 байтаx
	fmt.Println("Размер в байтах для ex1:", size.Of(ex1))
	// для выравнивания (padding) добавляется 8 - 4 - 1 = 3 байта. Поэтому в консоль будет выведено -> 73 + 3 = 76 байтов
}
